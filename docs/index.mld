{0 Scad_ml}

Scad_ml is a OCaml DSL for the {{:https://openscad.org/} OpenSCAD} solid modelling language.

{1 Notable difference from the OpenSCAD language}

- Angles are represented in radians (and converted to degrees when compiling to
  OpenSCAD).
- The dimensional system (2D or 3D) each shape inhabits is tracked by the type
  system. This is used to restrict the operations that can be legally applied
  (e.g. 2D shapes cannot be moved off of the xy plane,
  {{!Scad_ml.Scad.linear_extrude} [linear_extrude]} can only be applied to 2D shapes)
  and enforcing non-mixing of 2D and 3D shapes during boolean operations.
- Additional modules providing sweeps, roundovers, and more, inspired largely by
  {{:https://github.com/revarbat/BOSL2} BOSL2}, but also other OpenSCAD libraries such
  as {{:https://github.com/JustinSDK/dotSCAD/tree/master/src} dotSCAD}, and
  {{:https://github.com/rcolyer/plot-function} PlotFunction}.

{1 Usage}

{[
  open Scad_ml

  let () =
    let scad_logo =
      let rad = 5.
      and fn = 720 in
      let cyl = Scad.cylinder ~fn ~center:true ~height:(rad *. 2.3) (rad /. 2.) in
      let cross_cyl = Scad.rotate (v3 0. (Float.pi /. 2.) 0.) cyl in
      Scad.union
        [ Scad.difference
            (Scad.sphere ~fn rad)
            [ cyl; cross_cyl; Scad.rotate (v3 0. 0. (Float.pi /. 2.)) cross_cyl ]
        ; Scad.color ~alpha:0.25 Color.Magenta cross_cyl
        ]
    in
    Scad.to_file "scad_logo.scad" scad_logo
]}

{%html: <img src="../assets/scad_logo.png" style="width:125mm;" /> %}

Generted [.scad] scripts can then be viewed with the
{{:https://openscad.org/downloads.html} OpenSCAD viewer} as you normally would, or
directly exporting {{!Scad_ml.Scad.t} [Scad.t]} into other model formats or PNGs with
{{!Scad_ml.Scad.export} [Scad.export]} and {{!Scad_ml.Scad.snapshot} [Scad.snapshot]}
respectively.

{1:api API}

{!module-Scad_ml}

{2 Core DSL}
- {!modules: Scad_ml.Scad}
- {!modules: Scad_ml.Text}
- {!modules: Scad_ml.Color}

{2 Vectors and transformations}
- {!modules: Scad_ml.Vec2}
- {!modules: Scad_ml.Vec3}
- {!modules: Scad_ml.RotMatrix}
- {!modules: Scad_ml.MultMatrix}
- {!modules: Scad_ml.Quaternion}
- {!modules: Scad_ml.Plane}

{2 2d paths and polygons}
- {!modules: Scad_ml.Path2}
- {!modules: Scad_ml.Bezier2}
- {!modules: Scad_ml.CubicSpline}
- {!modules: Scad_ml.Poly2}
- {!modules: Scad_ml.PolyText}

{2 3d paths, coplanar polygons, and meshes}
- {!modules: Scad_ml.Path3}
- {!modules: Scad_ml.Bezier3}
- {!modules: Scad_ml.Poly3}
- {!modules: Scad_ml.Mesh}

{2 Utilities}
- {!modules: Scad_ml.Math}
- {!modules: Scad_ml.Export}
- {!modules: Scad_ml.BallTree2}
- {!modules: Scad_ml.BallTree3}

{1:examples Examples}

{2 Paths and Sweeps}
- {{!page-"spline"} {b Cubic spline}}
- {{!page-"arc_points"} {b Arcing paths}}
- {{!page-"helices"} {b Helical paths and extrusions}}
- {{!page-"resampled_path"} {b Path resampling and scaling/twisting sweeps}}
- {{!page-"spiral"} {b Flat spiral with bespoke sweep transforms}}
- {{!page-"wave_cylinder"} {b Wavey hollow cylinder with bespoke sweep transforms}}

{2 Rounded Extrusions}
- {{!page-"rounded_polyhole_sweep"} {b Rounded sweep along bezier spline with holes}}
- {{!page-"rounded_prism_tunnel"} {b Slanted prism with hole}}

{2 Function Plotting}
- {{!page-"polar_rose"} {b Rose polar plot}}
- {{!page-"cartesian_gravity_well"} {b Cartesian gravity well}}
- {{!page-"axial_chalice"} {b Axial chalice}}

{1:ppx \[@@deriving scad\]}

There is a companion ppx, {{:https://github.com/geoffder/ppx_deriving_scad} \[@@deriving scad\]}
for generating transformation functions for user-defined records and abstract
types made up of the {{!Scad_ml.Scad.t} [Scad.t]}, along with their
corresponding vector ({{!Scad_ml.Vec2.t} [Vec2.t]} or {{!Scad_ml.Vec3.t} [Vec3.t]})
types (and those composed of them) provided in this library.
